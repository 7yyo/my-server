package protocol.packet;

import io.netty.buffer.ByteBuf;
import lombok.Data;
import protocol.MySQLMessage;
import protocol.MySQLPacket;
import util.ByteUtil;

import static com.mysql.cj.protocol.a.NativeServerSession.*;

// https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake
@Data
public class AuthPacket extends MySQLPacket {

  public AuthPacket(ByteBuf byteBuf) {
    this.byteBuf = byteBuf;
  }

  private ByteBuf byteBuf;

  private int
      capabilityFlags; // capability flags of the client as defined in Protocol::CapabilityFlags
  private int
      maxPacketSize; // max size of a command packet that the client wants to send to the server
  private int
      characterSet; // connection's default character set as defined in Protocol::CharacterSet.
  private String
      userName; // name of the SQL account which client wants to log in -- this string should be
  // interpreted using the character set indicated by character set field.
  private String
      database; // initail database for the connection -- this string should be interpreted using
  // the character set indicated by character set field.
  private String
      authResponse; // opaque authentication response data generated by Authentication Method
  // indicated by the plugin name field.
  private String
      authPluginName; // the Authentication Method used by the client to generate auth-response
  // value in this packet. This is an UTF-8 string.

  public void parse() {

    byte[] bytes = ByteUtil.toBytes(this.byteBuf);

    MySQLMessage msg = new MySQLMessage(bytes, bytes.length, 0);
    msg.skip(4);
    this.capabilityFlags = msg.read4();
    if ((this.capabilityFlags & CLIENT_PROTOCOL_41) > 0) {
      this.maxPacketSize = msg.read4();
      this.characterSet = msg.read1();
      msg.skip(23);
      this.userName = msg.readStringNull();
      if ((this.capabilityFlags & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA) > 0) {
        long ar = msg.readLength();
        if (ar != 0) {
          this.authResponse = msg.readN(ar);
        }
      } else if ((this.capabilityFlags & CLIENT_SECURE_CONNECTION) > 0) {
        // todo
      } else {
        // todo
      }
      if ((this.capabilityFlags & CLIENT_CONNECT_WITH_DB) > 0) {
        this.database = msg.readStringNull();
      }
      if ((this.capabilityFlags & CLIENT_PLUGIN_AUTH) > 0) {
        this.authPluginName = msg.readStringNull();
      }
      if ((this.capabilityFlags & CLIENT_CONNECT_ATTRS) > 0) {
        // todo
      }
    }
  }

  public String toString() {
    return "receive => user: "
        + this.userName
        + ", database: "
        + this.database
        + ", auth name: "
        + this.authPluginName;
  }
}

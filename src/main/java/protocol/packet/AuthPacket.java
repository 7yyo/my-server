package protocol.packet;

import io.netty.buffer.ByteBuf;
import lombok.Data;
import lombok.SneakyThrows;
import protocol.MySQLMessage;
import protocol.MySQLPacket;
import protocol.con.CapabilitiesFlags;
import util.ByteUtil;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;

// https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake
@Data
public class AuthPacket extends MySQLPacket {

    public AuthPacket(ByteBuf byteBuf) {
        this.byteBuf = byteBuf;
    }

    private ByteBuf byteBuf;

    private int capabilityFlags; // capability flags of the client as defined in Protocol::CapabilityFlags
    private int maxPacketSize; // max size of a command packet that the client wants to send to the server
    private int characterSet; // connection's default character set as defined in Protocol::CharacterSet.
    private String userName; // name of the SQL account which client wants to log in -- this string should be interpreted using the character set indicated by character set field.
    // initail database for the connection -- this string should be interpreted using
    // the character set indicated by character set field.
    private String database;
    private String authResponse; // opaque authentication response data generated by Authentication Method indicated by the plugin name field.
    private String authPluginName; // the Authentication Method used by the client to generate auth-response value in this packet. This is an UTF-8 string.

    private HashMap<String, String> attrs = new HashMap<>();

    public void parse() {
        byte[] bytes = ByteUtil.toBytes(this.byteBuf);
        MySQLMessage msg = new MySQLMessage(bytes, bytes.length, 0);
        msg.skip(4);
        this.capabilityFlags = msg.read4();
        if ((this.capabilityFlags & CapabilitiesFlags.CLIENT_PROTOCOL_41) > 0) {
            this.maxPacketSize = msg.read4();
            this.characterSet = msg.read1();
            msg.skip(23); // filler
            this.userName = msg.readStringNull();
            if ((this.capabilityFlags & CapabilitiesFlags.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA) > 0) {
                long ar = msg.readLength();
                if (ar != 0) {
                    this.authResponse = msg.readN(ar);
                }
            }
            if ((this.capabilityFlags & CapabilitiesFlags.CLIENT_CONNECT_WITH_DB) > 0) {
                this.database = msg.readStringNull();
            }
            if ((this.capabilityFlags & CapabilitiesFlags.CLIENT_PLUGIN_AUTH) > 0) {
                this.authPluginName = msg.readStringNull();
            }
            if ((this.capabilityFlags & CapabilitiesFlags.CLIENT_CONNECT_ATTS) > 0) {
                if (msg.getData()[msg.getPosition()] != 0) {
                    this.attrs.put("attrs", msg.readN(msg.readLength()));
                }
            }
        }
    }

    public String toString() {
        return "receive auth packet=> user: " + this.userName + ", database: " + this.database + ", auth_name: " + this.authPluginName;
    }

}
